<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" 
            schematypens="http://relaxng.org/ns/structure/1.0"?>
<appendix xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="app.coretasks">
	<title>Core tasks</title>

	<para>This appendix contains a reference of all core tasks, i.e. all tasks that are needed to
		build a basic project.</para>
	<para>This reference lists the tasks alphabetically by the name of the classes that implement
		the tasks. So if you are searching for the reference to the <literal>&lt;copy></literal>
		tag, for example, you will want to look at the reference of
		<literal>CopyTask</literal>.</para>
	<sect1 role="taskdef" xml:id="AdhocTaskdefTask">
		<title>AdhocTaskdefTask </title>
		<para>The AdhocTaskdefTask allows you to define a task within your build file.</para>
		<para>Note that you should use &lt;![CDATA[ ... ]]&gt; so that you don't have to quote
			entities within your<literal> &lt;adhoc-task>&lt;/adhoc-task></literal> tags.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>name</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Name of XML tag that will represent this task.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="php">&lt;target name="main"
        description="==>test AdhocTask ">
		
		&lt;adhoc-task name="foo">&lt;![CDATA[
			class FooTest extends Task {
				private $bar;
				
				function setBar($bar) {
					$this->bar = $bar;
				}
				
				function main() {
					$this->log("In FooTest: " . $this->bar);
				}
			}
		]]&gt;&lt;/adhoc-task>
	
		&lt;foo bar="B.L.I.N.G"/>
&lt;/target></programlisting>
		</sect2>

	</sect1>
	<sect1 role="taskdef" xml:id="AdhocTypedefTask">
		<title>AdhocTypedefTask </title>
		<para>The AdhocTypedefTask allows you to define a datatype within your build file.</para>
		<para>Note that you should use &lt;![CDATA[ ... ]]&gt; so that you don't have to quote
			entities within your<literal> &lt;adhoc-type>&lt;/adhoc-type></literal> tags.</para>
		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>name</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Name of XML tag that will represent this datatype..</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Example</title>
			<programlisting language="php">&lt;target name="main"
        description="==>test AdhocType">
		
		&lt;adhoc-type name="dsn">&lt;![CDATA[
			class CreoleDSN extends DataType {
				private $url;
				
				function setUrl($url) {
					$this->url = $url;
				}
				
				function getUrl() {
  				return $this->url;
				}				
			}
		]]&gt;&lt;/adhoc-type>

     &lt;!-- creole-sql task doesn't exist; just an example -->
     &lt;creole-sql file="test.sql">
       &lt;dsn url="mysql://root@localhost/test"/>
		&lt;/creole-sql>

&lt;/target></programlisting>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="AppendTask">
		<title>AppendTask </title>
		<para>The Append Task appends text or contents of files to a specified file.</para>
		<para>In the example above, AppendTask is reading a filename from
				<literal>book/PhingGuide.book</literal>, processing the file contents with XSLT, and
			then appending the result to the file located at
				<literal>${process.outputfile}</literal>. This is a real example from the build file
			used to generate this book!</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>destFile</literal></entry>
						<entry><literal role="type">File</literal></entry>
						<entry>Path of file to which text should be appended.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>file</literal></entry>
						<entry><literal role="type">File</literal></entry>
						<entry>Path to file that should be appended to destFile.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>text</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Some literal text to append to file.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;append destFile="${process.outputfile}">
  &lt;filterchain>
    &lt;xsltfilter style="${process.stylesheet}">
	     &lt;param name="mode" expression="${process.xslt.mode}"/>
    &lt;/xsltfilter>
  &lt;/filterchain>
  &lt;filelist dir="book/" listfile="book/PhingGuide.book"/>
&lt;/append></programlisting>
		</sect2>

		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>filelist</literal></para>
				</listitem>
				<listitem>
					<para><literal>fileset</literal></para>
				</listitem>
				<listitem>
					<para><literal>filterchain</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="ApplyTask"> 
		<title>ApplyTask </title>
		<para>Applies a system command on each resource of the specified resource collection.</para>
        <para>When the os attribute is specified, then the command is only executed when run on one of the specified operating systems.</para>
        <para>The files of a number of Resource Collections – including but not restricted to FileSets or FileLists  – are passed as arguments to the system command.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="6">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<colspec colname="alias" colnum="6" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
						<entry>Alias</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>executable</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The command to execute without any command line arguments.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>dir</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The directory the command is to be executed in.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>output</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Where to direct stdout.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>error</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Where to direct stderr.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>os</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Only execute if the <xref xlink:href="#app.factsheet"/> property
							contains specified text.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>escape</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Escape shell metacharacters before execution. Setting this to true will enable the escape precaution.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>passthru</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether to use PHP's passthru() function instead of exec().</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>spawn</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether to spawn unix programs to the background, redirecting stdout.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>returnProperty</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Property name to set return value to from the execution.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>outputProperty</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Property name to set output value to from the execution.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>checkreturn</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether to check the return code of the execution, throws a
							BuildException when returncode != 0.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
						<entry>failonerror</entry>
					</row>
					<row>
						<entry><literal>append</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether output (and error) should be appended to or overwrite an existing file. 
                            If you set parallel to false, you will probably want to set this one to true.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>parallel</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Run the command only once, appending all files as arguments. If false, 
                            command will be executed once for every file.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>addsourcefile</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether source file name(s) should be added to the end of command-line automatically.
                            If you need to place it somewhere different, use a nested &lt;srcfile&gt; element between 
                            your &lt;arg&gt; elements to mark the insertion point.</entry>
						<entry><literal>true</literal></entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>spawn</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether the command(s) to be executed are spawned as background process.
                            If a command is spawned, its output will not be logged by Phing.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>relative</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether the filenames should be passed on the command line as relative pathnames
                            (relative to the base directory of the corresponding fileset/list for source files).</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>forwardslash</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether the file names should be passed with forward slashes even if the operating
                            system requires other file separator.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
						<entry></entry>
					</row>
					<row>
						<entry><literal>maxparallel</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Limit the amount of parallelism by passing at most this many sourcefiles at once.
                            Set it to &lt;= 0 for unlimited.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
						<entry></entry>
					</row>
	

			</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">
&lt;!-- Invokes somecommand arg1 SOURCEFILENAME arg2 for each file in /tmp --&gt;
&lt;apply executable="somecommand" parallel="false"&gt;
  &lt;arg value="arg1"/&gt;
  &lt;srcfile/&gt;
  &lt;arg value="arg2"/&gt;
  &lt;fileset dir="/tmp"/&gt;
&lt;/apply&gt;


&lt;!-- List all the .conf files of "/etc" to the "out.log" file. --&gt;
&lt;apply executable="ls" output="/tmp/out.log" append="true" &gt;
  &lt;arg value="-alh" /&gt;
  &lt;fileset dir="/etc" &gt;
    &lt;include name="*.conf" /&gt;
  &lt;/fileset&gt;
&lt;/apply&gt;



            </programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>arg</literal>
						<table>
							<title>Attributes</title>
							<tgroup cols="5">
								<colspec colname="name" colnum="1" colwidth="1.5*"/>
								<colspec colname="type" colnum="2" colwidth="0.8*"/>
								<colspec colname="description" colnum="3" colwidth="3.5*"/>
								<colspec colname="default" colnum="4" colwidth="0.8*"/>
								<colspec colname="required" colnum="5" colwidth="1.2*"/>
								<thead>
									<row>
										<entry>Name</entry>
										<entry>Type</entry>
										<entry>Description</entry>
										<entry>Default</entry>
										<entry>Required</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry><literal>value</literal></entry>
										<entry><literal role="type">String</literal></entry>
										<entry>A single command-line argument; can contain space
											characters.</entry>
										<entry>n/a</entry>
										<entry morerows="3">One of these</entry>
									</row>
									<row>
										<entry><literal>file</literal></entry>
										<entry><literal role="type">String</literal></entry>
										<entry>The name of a file as a single command-line argument;
											will be replaced with the absolute filename of the
											file.</entry>
										<entry>n/a</entry>
									</row>
									<row>
										<entry><literal>path</literal></entry>
										<entry><literal role="type">String</literal></entry>
										<entry>A string that will be treated as a path-like string
											as a single command-line argument; you can use ; or : as
											path separators and Ant will convert it to the
											platform's local conventions.</entry>
										<entry>n/a</entry>
									</row>
									<row>
										<entry><literal>line</literal></entry>
										<entry><literal role="type">String</literal></entry>
										<entry>A space-delimited list of command-line
											arguments.</entry>
										<entry>n/a</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
					</para>
				</listitem>
                <listitem><para><literal>fileset</literal></para></listitem>
                <listitem><para><literal>filelist</literal></para></listitem>
                <listitem><para><literal>srcfile</literal></para></listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="AvailableTask">
		<title>AvailableTask </title>
		<para>Available Task tests if a resource/file is set and sets a certain property to a
			certain value if it exists.</para>
		<para>Here, <literal>AvailableTask</literal> first checks for the existance of either file
			or directory named <literal>test.txt</literal> in <literal>/tmp</literal>. Then, it
			checks for the directory <literal>foo</literal> in <literal>/home</literal> and then for
			the file or directory <literal>bar</literal> in <literal>/home/foo</literal>. If
				<literal>/tmp/test.txt</literal> is found, the property
				<literal>test_txt_exists</literal> is set to <literal>"Yes"</literal>, if
				<literal>/home/foo</literal> is found and a directory,
				<literal>properties.yetanother</literal> is set to <literal>"true"</literal>
			(default). If <literal>/home/foo/bar</literal> exists, <literal>AvailableTask</literal>
			will set <literal>foo.bar</literal> to <literal>"Well, yes"</literal>.
			And last it checks if extension <literal>foo</literal> is loaded,
				so the property <literal>foo.ext.loaded</literal> is set to <literal>"true"</literal> (default).
			<emphasis role="bold">k</emphasis></para>
		<para><emphasis role="bold">NB:</emphasis> the Available task can also be used as a <xref
				xlink:href="#ch.projcomponents"/>.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>property</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Name of the property that is to be set.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>value</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The value the property is to be set to.</entry>
						<entry><literal>"true"</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>file</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>File/directory to check existence.</entry>
						<entry>n/a</entry>
						<entry>Yes (or <literal>resource</literal> or <literal>extension</literal>)</entry>
					</row>
					<row>
						<entry><literal>resource</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Path of the resource to look for.</entry>
						<entry>n/a</entry>
						<entry>Yes (or <literal>file</literal> or <literal>extension</literal>)</entry>
					</row>
					<row>
						<entry><literal>extension</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Name of the extension to look for.</entry>
						<entry>n/a</entry>
						<entry>Yes (or <literal>file</literal> or <literal>resource</literal>)</entry>
					</row>
					<row>
						<entry><literal>type</literal></entry>
						<entry><literal role="type">String</literal> (file|dir)</entry>
						<entry>Determines if <literal>AvailableTask</literal> should look for a file
							or a directory at the position set by <literal>file</literal>. If empty,
							it checks for either file or directory.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>filepath</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The path to use when looking up <literal>file</literal>.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>followSymlinks</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether to dereference symbolic links when looking up
								<literal>file</literal>.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;available file="/tmp/test.txt" property="test_txt_exists" value="Yes"/>

&lt;available file="/home/foo" type="dir" property="properties.yetanother" />

&lt;available file="/home/foo/bar" property="foo.bar" value="Well, yes" /></programlisting>
		</sect2>

	</sect1>
	<sect1 role="taskdef" xml:id="ChmodTask">
		<title>ChmodTask </title>
		<para>Sets the mode of a file or directory.</para>

		<para>For more informations, see <link xlink:href="http://php.net/chmod">chmod</link> in the
			PHP Manual.</para>
		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>file</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name of the file or directory. You either have to specify this
							attribute, or use a fileset.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>mode</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The new mode (octal) for the file. Specified in octal, even if the
							first digit is not a '0'.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>quiet</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Set quiet mode, which suppresses warnings if
								<literal>chmod()</literal> fails</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>failonerror</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>This flag means 'note errors to the output, but keep going'</entry>
						<entry><literal>true</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>verbose</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Give more information in error message in case of a failure</entry>
						<entry><literal>true</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;chmod file="test.txt" mode="0755" />
&lt;chmod file="/home/test" mode="0775" />
&lt;chmod file="/home/test/mine.txt" mode="0500" verbose="true" /></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>fileset</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="ChownTask">
		<title>ChownTask </title>
		<para>Changes the owner of a file or directory.</para>
		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>file</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name of the file or directory. You either have to specify this
							attribute, or use a fileset.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>user</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The new owner of the file. Can contain a username and a groupname,
							separated by a dot.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>group</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The new group owner of the file.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>quiet</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Set quiet mode, which suppresses warnings if
								<literal>chmod()</literal> fails</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>failonerror</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>This flag means 'note errors to the output, but keep going'</entry>
						<entry><literal>true</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>verbose</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Give more information in error message in case of a
							failure</entry>
						<entry><literal>true</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;chown file="my-file.txt" user="foo" />
&lt;chown file="my-file.txt" user="username.groupname" />
&lt;chown file="/home/test/my-directory" user="bar" />
&lt;chown file="/home/test/my-file.txt" user="foo" verbose="true" failonerror="false" /></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>fileset</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="ConditionTask">
		<title>ConditionTask </title>
		<para>Sets a property if a certain condition holds true - this is a generalization of <xref
				xlink:href="#AvailableTask"/> and <xref xlink:href="#UpToDateTask"/>.</para>
		<para>If the condition holds true, the property value is set to true by default; otherwise,
			the property is not set. You can set the value to something other than the default by
			specifying the <literal>value</literal> attribute.</para>
		<para>Conditions are specified as nested elements, you must specify exactly one condition -
			see the <xref xlink:href="#ch.projcomponents"/> for a complete list of nested
			elements.</para>
		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>property</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name of the property to set.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>value</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The value to set the property to. Defaults to "true".</entry>
						<entry><literal>true</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;condition property="isMacOrWindows">
    &lt;or>
      &lt;os family="mac"/>
      &lt;os family="windows"/>
    &lt;/or>
  &lt;/condition></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>or</literal></para>
				</listitem>
				<listitem>
					<para><literal>and</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="CopyTask">
		<title>CopyTask </title>
		<para>Copies files or directories. Files are only copied if the source file is newer than
			the destination file, or when the destination file does not exist. It is possible to
			explictly overwrite existing files.</para>
		<para><literal>CopyTask</literal> does not allow self copying, i.e. copying a file to the
			same name for security reasons.</para>
		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>file</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The source file.</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>tofile</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>
							<para>The destination the file is to be written to.
									<literal>tofile</literal> specifies a <literal>full</literal>
								filename. If you only want to specify a directory to copy to, use
									<literal>todir</literal>.</para>
							<para>Either this or the <literal>todir</literal> attribute is
								required.</para>
						</entry>
						<entry>n/a</entry>
						<entry>Yes (or <literal>todir</literal>)</entry>
					</row>
					<row>
						<entry><literal>todir</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The directory the file is to be copied to. The file will have the
							same name of the source file. If you want to specify a different name,
							use <literal>tofile</literal>. The directory must exist.</entry>
						<entry>n/a</entry>
						<entry>Yes (or <literal>tofile</literal>)</entry>
					</row>
					<row>
						<entry><literal>overwrite</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Overwrite existing files even if the destination files are newer.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry>tstamp or preservelastmodified</entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>If set to <literal>true</literal>, the new file will have the same
							mtime as the old one.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry>preservemode or preservepermissions</entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>If set to <literal>true</literal>, the new file (and directory) will have the same
							permissions as the old one. The <literal>mode</literal> specified for directory
							creation will be ignored.</entry>
						<entry><literal>true</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>includeemptydirs</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>If set to <literal>true</literal>, also empty directories are copied. </entry>
						<entry><literal>true</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>mode</literal></entry>
						<entry><literal role="type">Integer</literal></entry>
						<entry>Mode (octal) to create directories with.</entry>
						<entry>From umask</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>haltonerror</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>If set to <literal>true</literal>, halts the build when errors are
							encountered.</entry>
						<entry><literal>true</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<note>
			<para>No automatic exapnsion of symbolic links</para>
			<para>By default, <literal>CopyTask</literal> does not expand / dereference symbolic
				links, and will simply copy the link itself. To enable dereferencing, set
					<literal>expandsymboliclinks</literal> to <literal>true</literal> in the
					<literal>&lt;fileset></literal> tag.</para>
		</note>
		<sect2>
			<title>Examples</title>
			<para>On the one hand, CopyTask can be used to copy file by file:</para>
			<programlisting language="xml">&lt;copy file="somefile.txt" tofile="/tmp/anotherfile.bak" overwrite="true"/></programlisting>
			<para>Additionally, <literal>CopyTask</literal> supports Filesets, i.e. you can easily
				include/exclude one or more files. For more information, see <xref
					xlink:href="#app.coretypes"/> -- pay particular attention to the
					<literal>defaultexcludes</literal> attribute. <xref
					xlink:href="#app.coremappers"/> and <xref xlink:href="#app.corefilters"/> are
				also supported by <literal>CopyTask</literal>, so you can do almost everything that
				needs processing the content of the files or the filename.</para>
			<programlisting language="xml">&lt;copy todir="/tmp/backup" >
  &lt;fileset dir=".">
    &lt;include name="**/*.txt" />
    &lt;include name="**/*.doc" />
    &lt;include name="**/*.swx" />
  &lt;/fileset>
  &lt;filelist dir="." files="test.html"/>
&lt;/copy></programlisting>
			<programlisting language="xml">&lt;copy todir="build" >
  &lt;fileset defaultexcludes="false" expandsymboliclinks="true" dir=".">
    &lt;include name="**/*.php" />
  &lt;/fileset>
&lt;/copy></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>fileset</literal></para>
				</listitem>
				<listitem>
					<para><literal>filelist</literal></para>
				</listitem>
				<listitem>
					<para><literal>filterchain</literal></para>
				</listitem>
				<listitem>
					<para><literal>mapper</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="CvsTask">
		<title>CvsTask </title>
		<para>Allows rudimentary interfacing with the CVS versioning system.</para>
		<para>As you would expect, this lets you do pretty much anything with CVS. The CvsTask calls
			ExecTask which actually does the command execution.</para>
		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>cvsRoot</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The root directory on the CVS server</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>CvsRsh</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Path to the rsh to execute</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>port</literal></entry>
						<entry><literal role="type">Integer</literal></entry>
						<entry>Port ion the server to use</entry>
						<entry>0</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>passfile</literal></entry>
						<entry>String <literal>filename</literal></entry>
						<entry>Name of file with CVS passwords</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>dest</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The directory where checked out files should be placed</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>modules</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The package/module to operate upon</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>tag</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The tag of the package/module to operate upon</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>date</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Use the most recent revision no later than the given date</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>quiet</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Quiet run</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>noexec</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>If true, only report changes don't actually do anything</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>failonerror</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Stop the build process if the command returns any errors</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>compression</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>If true, turns on compression using default (3) compression
							level</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>compressionlevel</literal></entry>
						<entry><literal role="type">Integer</literal></entry>
						<entry>Specifies compression level 1-9</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>output</literal></entry>
						<entry>String <literal>filename</literal></entry>
						<entry>File to which output should be written</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>error</literal></entry>
						<entry>String <literal>filename</literal></entry>
						<entry>File to which error output should be written</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>command</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Optional command line to be given to the CVS task</entry>
						<entry>null</entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;cvs cvsRoot=":pserver:guest@cvs.tigris.org:/cvs"
       module="phing" dest="${ws.dir}"/></programlisting>
			<para>or, using the optional command line arguments:</para>
			<programlisting language="xml">&lt;cvs output="patch" command="-q diff -u -N" /></programlisting>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="CvsPassTask">
		<title>CvsPassTask </title>
		<para>This lets you create your own cvs password file -- i.e. this is necessary if you want
			to provide a password in your build file.</para>
		<para>If no password file is specified the default location <literal>.cvspass</literal> in
			users home directory is used.</para>
		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>cvsRoot</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The root directory on the CVS server</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>passFile</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Password file to add password to</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>password</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Password to add to file</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;!-- create a password file -->
&lt;cvspass cvsRoot=":pserver:guest@cvs.tigris.org:/cvs" passfile="cvspass" password="guest"/>

&lt;!-- use the just-created password file -->
&lt;cvs cvsRoot=":pserver:guest@cvs.tigris.org:/cvs" module="phing" passFile="cvspass" /></programlisting>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="DeleteTask">
		<title> DeleteTask </title>
		<para>Deletes a file or directory, or set of files defined by a fileset. See <xref
				xlink:href="#app.coretypes"/> for information on Filesets.</para>
		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>file</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The file that is to be deleted. You either have to specify this
							attribute, <literal>dir</literal>, or use a fileset.</entry>
						<entry>n/a</entry>
						<entry>Yes (or <literal>dir</literal>)</entry>
					</row>
					<row>
						<entry><literal>dir</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The directory that is to be deleted. You either have to specify this
							attribute, <literal>file</literal>, or use a fileset.</entry>
						<entry>n/a</entry>
						<entry>Yes (or <literal>file</literal>)</entry>
					</row>
					<row>
						<entry><literal>verbose</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Used to force listing of all names of deleted files.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>quiet</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>
							<para>If the file does not exist, do not display a diagnostic message or
								modify the exit status to reflect an error. This means that if a
								file or directory cannot be deleted, then no error is
								reported.</para>
							<para>This setting emulates the -f option to the Unix
									<literal>rm</literal> command. Default is false meaning things
								are verbose</para>
						</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>failonerror</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>If this attribute is set to <literal>true</literal>, DeleteTask will
							verbose on errors but the build process will not be stopped.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>includeemptydirs</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Determines if empty directories are also to be deleted.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;!-- Delete a specific file -->
&lt;delete file="/tmp/foo.bar" />

&lt;!-- Delete a directory -->
&lt;delete dir="/tmp/darl" includeemptydirs="true" verbose="true" failonerror="true" />

&lt;!-- Delete using a fileset -->
&lt;delete>
  &lt;fileset dir="/tmp">
    &lt;include name="*.bar" />
  &lt;/fileset>
&lt;/delete></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>fileset</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="EchoTask">
		<title>EchoTask </title>
		<para>Echoes a message to the current loggers and listeners which means standard out unless
			overridden. A level can be specified, which controls at what logging level the message
			is filtered at.</para>
		<para>The task can also echo to a file, in which case the option to append rather than
			overwrite the file is available, and the level option is ignored</para>
		<para>Additionally, the task can echo the contents of a nested fileset element.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>msg</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The string that is to be send to the output.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>message</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Alias for <literal>msg</literal>.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>file</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The file to write the message to.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>append</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Append to an existing file?</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>level</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Control the level at which this message is reported. One of
								<literal>error</literal>, <literal>warning</literal>,
								<literal>info</literal>, <literal>verbose</literal>,
								<literal>debug</literal>.</entry>
						<entry><literal>info</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;echo msg="Phing rocks!" />

&lt;echo message="Binarycloud, too." />

&lt;echo>And don't forget Propel.&lt;/echo>

&lt;echo file="test.txt" append="false">This is a test message&lt;/echo></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>fileset</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="ExecTask">
		<title>ExecTask </title>
		<para>Executes a shell command. You can use this to quickly add a new command to Phing.
			However, if you want to use this regularly, you should think about writing a Task for
			it.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>command</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The command that is to be executed.</entry>
						<entry>n/a</entry>
						<entry morerows="1">One of the two</entry>
					</row>
					<row>
						<entry><literal>executable</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The command to execute without any command line arguments.</entry>
						<entry>n/a</entry>
					</row>
					<row>
						<entry><literal>dir</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The directory the command is to be executed in.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>output</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Where to direct stdout.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>error</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Where to direct stderr.</entry>
						<entry>Redirected to stdout, unless
						<literal>passthru</literal> is set to true.</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>os</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Only execute if the <xref xlink:href="#app.factsheet"/> property
							contains specified text.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>escape</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>By default, we escape shell metacharacters before executing. Setting
							this to false will disable this precaution.</entry>
						<entry><literal>true</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>passthru</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether to use PHP's passthru() function instead of exec().</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>logoutput</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether to log returned output as MSG_INFO instead of
							MSG_VERBOSE.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>spawn</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether to spawn unix programs to the background, redirecting
							stdout.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>returnProperty</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Property name to set return value to from exec() call.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>outputProperty</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Property name to set output value to from exec() call.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>checkreturn</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether to check the return code of the program, throws a
							BuildException when returncode != 0.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>level</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Control the level at which status messages are reported. One of
								<literal>error</literal>, <literal>warning</literal>,
								<literal>info</literal>, <literal>verbose</literal>,
								<literal>debug</literal>.</entry>
						<entry><literal>verbose</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;!-- List the contents of "/home". -->
&lt;exec command="ls -l" dir="/home" />

&lt;!-- Start the make process in "/usr/src/php-4.0". -->
&lt;exec command="make" dir="/usr/src/php-4.0" />

&lt;!-- List the contents of "/tmp" out to a file. -->
&lt;exec command="ls -l /tmp > foo.out" escape="false" /></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>arg</literal>
						<table>
							<title>Attributes</title>
							<tgroup cols="5">
								<colspec colname="name" colnum="1" colwidth="1.5*"/>
								<colspec colname="type" colnum="2" colwidth="0.8*"/>
								<colspec colname="description" colnum="3" colwidth="3.5*"/>
								<colspec colname="default" colnum="4" colwidth="0.8*"/>
								<colspec colname="required" colnum="5" colwidth="1.2*"/>
								<thead>
									<row>
										<entry>Name</entry>
										<entry>Type</entry>
										<entry>Description</entry>
										<entry>Default</entry>
										<entry>Required</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry><literal>value</literal></entry>
										<entry><literal role="type">String</literal></entry>
										<entry>A single command-line argument; can contain space
											characters. To pass an empty argument, enclose
											two double quotes in single quotes ('""').</entry>
										<entry>n/a</entry>
										<entry morerows="3">One of these</entry>
									</row>
									<row>
										<entry><literal>file</literal></entry>
										<entry><literal role="type">String</literal></entry>
										<entry>The name of a file as a single command-line argument;
											will be replaced with the absolute filename of the
											file.</entry>
										<entry>n/a</entry>
									</row>
									<row>
										<entry><literal>path</literal></entry>
										<entry><literal role="type">String</literal></entry>
										<entry>A string that will be treated as a path-like string
											as a single command-line argument; you can use ; or : as
											path separators and Ant will convert it to the
											platform's local conventions.</entry>
										<entry>n/a</entry>
									</row>
									<row>
										<entry><literal>line</literal></entry>
										<entry><literal role="type">String</literal></entry>
										<entry>A space-delimited list of command-line
											arguments.</entry>
										<entry>n/a</entry>
									</row>
								</tbody>
							</tgroup>
						</table>
					</para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="FailTask">
		<title>FailTask </title>
		<para>Causes the current build script execution to fail and the script to exit with an
			(optional) error message.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>message</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The message to display (reason for script abort).</entry>
						<entry>"No Message"</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>msg</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Alias for message</entry>
						<entry>"No Message"</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>if</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Name of property that must be set for script to exit.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>unless</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Name of property that must <literal>not</literal> be set in order for
							script to exit.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;!-- Exit w/ message -->
&lt;fail message="Failed for some reason!" />

&lt;!--  Exit if ${errorprop} is defined -->
&lt;fail if="errorprop" message="Detected error!" />

&lt;!-- Exit unless ${dontfail} prop is defined. -->
&lt;fail unless="dontfail" message="Detected error!" /></programlisting>
		</sect2>
	</sect1>
	
	<sect1 role="taskdef" xml:id="ForeachTask">
		<title>ForeachTask </title>
		<para>The <literal>foreach</literal> task iterates over a list, a list of
				<literal>filesets</literal>, or both. If both, <literal>list</literal> and
				<literal>filesets</literal>, are specified, the list will be evaluated first. Nested
				<literal>filesets</literal> are evaluated in the order they appear in the
			task.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>list</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The list of values to process, with the delimiter character,
							indicated by the "delimiter" attribute, separating each value.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>target</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The target to call for each token, passing the token as the parameter
							with the name indicated by the "param" attribute.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>param</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name of the parameter to pass the tokens in as to the
							target.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>absparam</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name of the absolute pathparameter to pass the tokens in as to
							the target (used while processing nested filesets).</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>delimiter</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The delimiter string that separates the values in the "list"
							parameter. The default is ",".</entry>
						<entry>,</entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;!-- loop through languages, and call buildlang task with setted param -->
&lt;property name="languages" value="en,fr,de" />
&lt;foreach list="${languages}" param="lang" target="buildlang" />

&lt;!-- loop through files, and call subtask task with set param and absparam -->
&lt;foreach param="filename" absparam="absfilename" target="subtask">
  &lt;fileset dir=".">
    &lt;include name="*.php"/>
  &lt;/fileset>
&lt;/foreach></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>fileset</literal></para>
				</listitem>
				<listitem>
					<para><literal>mapper</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="IfTask">
		<title>IfTask </title>
		<para>Perform some tasks based on whether a given condition holds true or not.</para>
		<para>This task doesn't have any attributes, the condition to test is specified by a nested
			element - see the <xref xlink:href="#ch.projcomponents"/> for a complete list of nested
			elements.</para>
		<para>Just like the <literal>&lt;condition></literal> task, only a single condition can be
			specified - you combine them using <literal>&lt;and></literal> or
				<literal>&lt;or></literal> conditions.</para>
		<para>In addition to the condition, you can specify three different child elements,
				<literal>&lt;elseif></literal> , <literal>&lt;then></literal> and
				<literal>&lt;else></literal> . All three subelements are optional. Both
				<literal>&lt;then></literal> and <literal>&lt;else></literal> must not be used more
			than once inside the if task. Both are containers for Phing tasks.</para>
		<para>The <literal>&lt;elseif></literal> behaves exactly like an <literal>&lt;if></literal>
			except that it cannot contain the <literal>&lt;else></literal> element inside of it. You
			may specify as may of these as you like, and the order they are specified is the order
			they are evaluated in. If the condition on the <literal>&lt;if></literal> is false, then
			the first <literal>&lt;elseif></literal> who's conditional evaluates to true will be
			executed. The <literal>&lt;else></literal> will be executed only if the
				<literal>&lt;if></literal> and all <literal>&lt;elseif></literal> conditions are
			false.</para>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;if>
 &lt;equals arg1="${foo}" arg2="bar" />
 &lt;then>
   &lt;echo message="The value of property foo is bar" />
 &lt;/then>
 &lt;else>
   &lt;echo message="The value of property foo is not bar" />
 &lt;/else>
&lt;/if></programlisting>
			<programlisting language="xml">&lt;if>
 &lt;equals arg1="${foo}" arg2="bar" />
 &lt;then>
   &lt;echo message="The value of property foo is 'bar'" />
 &lt;/then>

 &lt;elseif>
  &lt;equals arg1="${foo}" arg2="foo" />
  &lt;then>
   &lt;echo message="The value of property foo is 'foo'" />
  &lt;/then>
 &lt;/elseif>

 &lt;else>
   &lt;echo message="The value of property foo is not 'foo' or 'bar'" />
 &lt;/else>
&lt;/if></programlisting>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="ImportTask">
		<title>ImportTask </title>
		<para>Imports another build file into the current project.</para>
		<para>On execution it will read another Phing file into the same Project. Functionally it is
			nearly the same as copy and pasting the imported file onto the end of the importing
			file.</para>
		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>file</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The file to import.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>optional</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>If true, do not stop the build if the file does not exist.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Target Overriding</title>
			<para>If a target in the main file is also present in at least one of the imported
				files, the one from the main file takes precedence.</para>
			<para>So if I import for example a <literal>docs/build.xml</literal> file named
					<filename>builddocs</filename>, that contains a "<literal>docs</literal>"
				target, I can redefine it in my main buildfile and that is the one that will be
				called. This makes it easy to keep the same target name, so that the overriding
				target is still called by any other targets--in either the main or imported
				buildfile(s)--for which it is a dependency, with a different implementation. The
				target from <literal>docs/build.xml</literal> is made available by the name
					"<literal>builddocs.docs</literal>". This enables the new implementation to call
				the old target, thus enhancing it with tasks called before or after it.</para>
		</sect2>
		<sect2>
			<title>Special Properties</title>
			<para>Imported files are treated as they are present in the main buildfile. This makes
				it easy to understand, but it makes it impossible for them to reference files and
				resources relative to their path. Because of this, for every imported file, Phing
				adds a property that contains the path to the imported buildfile. With this path,
				the imported buildfile can keep resources and be able to reference them relative to
				its position.</para>
			<para>So if I import for example a <literal>docs/build.xml</literal> file named
					<filename>builddocs</filename>, I can get its path as
					<literal>phing.file.builddocs</literal>, similarly to the
					<literal>phing.file</literal> property of the main buildfile. Additionally,
					the directory will be stored in <literal>phing.dir.builddocs</literal>.</para>
			<para>Note that "builddocs" is not the filename, but the name attribute present in the
				imported project tag.</para>
			<para>If import file does not have a name attribute, the
					<literal>phing.file.projectname</literal> and <literal>phing.dir.projectname</literal>
					properties will not be set.</para>
		</sect2>
		<sect2>
			<title>Resolving Files Against the Imported File</title>
			<para>Suppose your main build file called <literal>importing.xml</literal> imports a
				build file <filename>imported.xml</filename> , located anywhere on the file system,
				and <literal>imported.xml</literal> reads a set of properties from
					<literal>imported.properties</literal> :</para>
			<programlisting language="xml">&lt;!-- importing.xml -->
&lt;project name="importing" basedir="." default="...">
  &lt;import file="${path_to_imported}/imported.xml"/>
&lt;/project>

&lt;!-- imported.xml -->
&lt;project name="imported" basedir="." default="...">
  &lt;property file="imported.properties"/>
&lt;/project></programlisting>
			<para>This snippet however will resolve <literal>imported.properties</literal> against
				the basedir of <literal>importing.xml</literal> , because the basedir of
					<literal>imported.xml</literal> is ignored by Phing. The right way to use
					<literal>imported.properties</literal> is:</para>
			<programlisting language="xml">&lt;!-- imported.xml -->
&lt;project name="imported" basedir="." default="...">
  &lt;property file="${phing.file.imported}/imported.properties"/>
&lt;/project></programlisting>
			<para>As explained above <literal>${phing.file.imported}</literal> stores the full path of the build
				script, that defines the project called <emphasis>imported</emphasis>, (in short it
				stores the path to <literal>imported.xml</literal>) and <literal>${phing.dir.imported}</literal>
				stores its directory. This technique also allows
					<literal>imported.xml</literal> to be used as a standalone file (without being
				imported in other project).</para>

		</sect2>

		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;import file="path/to/build.xml"/>
&lt;import file="path/to/build.xml" optional="true"/></programlisting>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="IncludePathTask">
		<title>IncludePathTask </title>
		<para>Sets the PHP <literal>include_path</literal> configuration option for the duration of this
			phing run.</para>
		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>classpath</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>the new include path[s]</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>classPathRef</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Reference to a previously defined Path type</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;includepath classpath="new/path/here" />
&lt;includepath classpath="path1:path2" /></programlisting>
			<programlisting language="xml">&lt;path id="project.class.path">
  &lt;pathelement dir="lib/"/>
  &lt;pathelement dir="ext/"/>
&lt;/paentry>
&lt;includepath classpathref="project.class.path" /></programlisting>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="InputTask">
		<title>InputTask </title>
		<para>The <literal>InputTask</literal> can be used to interactively set property values
			based on input from the console (or other Reader).</para>
		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>propertyName</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name of the property to set.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>defaultValue</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The default value to be set if no new value is provided.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>message</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Prompt text (same as CDATA).</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>promptChar</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The prompt character to follow prompt text.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>validArgs</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Comma-separated list of valid choices the user must supply. If used,
							one of these options must be chosen.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<!-- TODO : Add "os" as soon as it is supported -->
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;!-- Getting string input -->
&lt;echo>HTML pages installing to: ${documentRoot}&lt;/echo>
&lt;echo>PHP classes installing to: ${servletDirectory}&lt;/echo>

&lt;input propertyname="documentRoot">Web application document root&lt;/input>
&lt;input propertyname="servletDirectory"
  defaultValue="/usr/servlets" promptChar="?">PHP classes install dir&lt;/input>

&lt;echo>HTML pages installed to ${documentRoot}&lt;/echo>
&lt;echo>PHP classes installed to ${servletDirectory}&lt;/echo>

&lt;!-- Having the user choose from a set of valid choices -->
&lt;echo>Choose a valid option:&lt;/echo>

&lt;input propertyname="optionsChoice" validargs="foo,bar,bob">
  Which item would you like to use
&lt;/input></programlisting>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="LoadFileTask">
		<title>LoadFileTask </title>
		<para>The <literal>LoadFileTask</literal> loads the contents of a (text) file into a single
			property.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>property</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name of the property to set.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry>file (or <literal>srcFile</literal>)</entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The file to load.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;loadfile property="version" file="version.txt"/></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags:</title>
			<itemizedlist>
				<listitem>
					<para><literal>filterchain</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="MkdirTask">
		<title>MkdirTask </title>
		<para>Creates a directory, including any necessary but non-existent parent directories. Does
			nothing if the directory already exists.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>dir</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The directory that is to be created.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>mode</literal></entry>
						<entry><literal role="type">Integer</literal></entry>
						<entry>The mode to create the directory with.</entry>
						<entry>From umask</entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;!-- Create a temp directory -->
&lt;mkdir dir="/tmp/foo" />

&lt;!-- Using mkdir with a property -->
&lt;mkdir dir="${dirs.install}/tmp" />
</programlisting>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="MoveTask">
		<title>MoveTask </title>
		<para>Moves a file or directory to a new file or directory. By default, the destination file
			is overwritten if it already exists. When overwrite is turned off, then files are only
			moved if the source file is newer than the destination file, or when the destination
			file does not exist.</para>
		<para>Source files and directories are only deleted if the file or directory has been copied
			to the destination successfully.</para>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;!-- The following will move the file "somefile.txt" to "/tmp" and
    change its filename to "anotherfile.bak". It will overwrite
    an existing file. -->
&lt;move file="somefile.txt" tofile="/tmp/anotherfile.bak" overwrite="true"/>

&lt;!-- This will move the "/tmp" directory to "/home/default/tmp",
    preserving the directory name. So the final name is
    "/home/default/tmp/tmp". Empty directories are also copied -->
&lt;move file="/tmp" todir="/home/default/tmp" includeemptydirs="true" /></programlisting>
		</sect2>
		<sect2 role="taskattributes">
			<title>Attributes and Nested Elements</title>
			<para>For further documentation, see <xref xlink:href="#CopyTask"/>, since MoveTask only
				is a child of CopyTask and inherits all attributes.</para>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="PhingTask">
		<title>PhingTask </title>
		<para>This task calls another build file. You may specify the target that is to be called
			within the build file. Additionally, the <literal>&lt;phing></literal> Tag may contain
				<literal>&lt;property></literal> Tags (see <xref xlink:href="#PropertyTask"
			/>).</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>inheritAll</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>If true, pass all properties to the new phing project.</entry>
						<entry><literal>true</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>inheritRefs</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>If true, pass all references to the new phing project.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>dir</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The directory to use as a base directory for the new phing project.
							Default is the current project's basedir, unless inheritall has been set
							to <literal>false</literal>, in which case it doesn't have a default
							value. This will override the basedir setting of the called
							project.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>phingFile</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The build file to use. Defaults to "build.xml". This file is expected
							to be a filename relative to the dir attribute given.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>target</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The target of the new Phing project to execute. Default is the new
							project's default target.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>haltonfailure</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>If true, fail the build process when the called build fails</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;!-- Call target "xslttest" from buildfile "alternativebuildfile.xml" -->
 &lt;phing phingfile="alternativebuild.xml" inheritRefs="true" target="xslttest" />

&lt;!-- Do a more complex call -->
&lt;phing phingfile="somebuild.xml" target="sometarget">
  &lt;property name="foo" value="bar" />
  &lt;property name="anotherone" value="32" />
&lt;/phing></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>fileset</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
		<sect2>
			<title>Base directory of the new project</title>
			<para>The base directory of the new project is set dependant on the <literal>dir</literal> and
				the <literal>inheritAll</literal> attribute. This is important to keep in mind or
				else you might run into bugs in your<filename> build.xml</filename>'s. The following
				table shows when which value is used:</para>
			<table>
				<title>How attributes are used</title>
				<tgroup cols="3">
					<colspec colname="name" colnum="1" colwidth="1*"/>
					<colspec colname="type" colnum="2" colwidth="1*"/>
					<colspec colname="description" colnum="3" colwidth="2*"/>
					<thead>
						<row>
							<entry><literal>dir</literal></entry>
							<entry><literal>inheritAll</literal></entry>
							<entry>new project's basedir</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry>value provided</entry>
							<entry><literal>true</literal></entry>
							<entry>value of <literal>dir</literal> attribute</entry>
						</row>
						<row>
							<entry>value provided</entry>
							<entry><literal>false</literal></entry>
							<entry>value of <literal>dir</literal> attribute</entry>
						</row>
						<row>
							<entry><literal>omitted</literal></entry>
							<entry><literal>true</literal></entry>
							<entry>basedir of calling task (the build file containing the
									<literal>&lt;phing></literal> call.</entry>
						</row>
						<row>
							<entry><literal>omitted</literal></entry>
							<entry><literal>false</literal></entry>
							<entry>basedir attribute of the <literal>&lt;project></literal> element
								of the new project</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="PhingCallTask">
		<title>PhingCallTask </title>
		<para>The PhingCallTask calls a target within the same Phing project.</para>
		<para>A <literal>&lt;phingcall></literal> tag may contain <literal>&lt;property></literal>
			tags that define new properties. These properties are only set if properties of the same
			name have not been set outside the <literal>"phingcall"</literal> tag.</para>


		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type/Values</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>target</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name of the target in the same project that is to be
							called.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<!-- Not used yet. TODO: Document if it is
    <row>
<entry><literal>inheritAll</literal></entry>
      <entry><literal role="type">Boolean</literal></entry>
      <entry>
        If true, all
      </entry>
      <entry><literal>true</literal></entry>
      <entry>No</entry>
    </row>
    <row>
<entry><literal>inheritRefs</literal></entry>
      <entry><literal role="type">Boolean</literal></entry>
      <entry>
      </entry>
      <entry><literal>false</literal></entry>
      <entry>No</entry>
    </row>
    -->
				</tbody>
			</tgroup>
		</table>
		<note>
			<para>Local scope.</para>
			<para>Every <literal>&lt;phingcall></literal> tag creates a new local scope. Thus, any
				properties or other variables set inside that scope will cease to exist (or revert
				to their previous value) once the <literal>&lt;phingcall></literal> tag
				completes.</para>
		</note>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;target name="foo">
    &lt;phingcall target="bar">
        &lt;property name="property1" value="aaaaa" />
        &lt;property name="foo" value="baz" />
    &lt;/phingcall>
&lt;/target></programlisting>
			<para>In the example above, the properties <literal>property1</literal> and
					<literal>foo</literal> are defined and only accessible inside the called
				target.</para>
			<programlisting language="xml">&lt;target name="bar" depends="init">
    &lt;echo message="prop is ${property1} ${foo}" />
&lt;/target></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>property</literal></para>
				</listitem>
				<listitem>
					<para><literal>param</literal> (alias for property)</para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="PhpEvalTask">
		<title>PhpEvalTask </title>
		<para>With the <literal>PhpEvalTask</literal>, you can set a property to the results of evaluating
			a PHP expression or the result returned by a function/method call.</para>


		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>function</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name of the Property.</entry>
						<entry>n/a</entry>
						<entry morerows="1">One of these is required.</entry>
					</row>
					<row>
						<entry><literal>expression</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The expression to evaluate.</entry>
						<entry>n/a</entry>
					</row>
					<row>
						<entry><literal>class</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The static class which contains function.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>returnProperty</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name of the property to set with result of expression or function
							call. <emphasis>Note:</emphasis> if this attribute is set, the
							expression must return a value.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>level</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Control the level at which phplint reports status messages. One of
								<literal>error</literal>, <literal>warning</literal>,
								<literal>info</literal>, <literal>verbose</literal>,
								<literal>debug</literal>.</entry>
						<entry><literal>info</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;php function="crypt" returnProperty="enc_passwd">
  &lt;param value="${auth.root_passwd}"/>
&lt;/php></programlisting>
			<programlisting language="xml">&lt;php expression="3 + 4" returnProperty="sum"/></programlisting>
			<programlisting language="xml">&lt;php expression="echo 'test';"></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>param</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="PropertyTask">
		<title>PropertyTask </title>
		<para>With <literal>PropertyTask</literal>, you can define <literal>user</literal> properties in
			your build file.</para>


		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>name</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name of the Property.</entry>
						<entry>n/a</entry>
						<entry>Yes (unless using
						<literal>file</literal> or
						<literal>environment</literal>)</entry>
					</row>
					<row>
						<entry><literal>value</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The value of the Property.</entry>
						<entry>n/a</entry>
						<entry>Yes (unless using 
						<literal>file</literal> or
						<literal>environment</literal>)</entry>
					</row>
					<row>
						<entry><literal>environment</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Loads properties from the environment with the specified value
							as prefix. Thus if you specify environment="myenv" you will be
							able to access OS-specific environment variables via property
							names "myenv.PATH" or "myenv.TERM".</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>file</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Path to properties file.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>override</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether to force override of existing value.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>prefix</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Used when properites are loaded from file. Prefix is applied to
							properties loaded from specified file. A "." is appended to the prefix
							if not specified.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>refid</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>A reference to a previously defined propeprty</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>fallback</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>If a reference cannot be found within the current project scope this
							attribute specifies a fallback project scope.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<note>
			<para>Important note about scope: when the <literal>&lt;property></literal> tag is
				called inside a <literal>&lt;phingcall></literal> tag, any properties are set in a
				new local scope. Thus, any properties or other variables set inside that scope will
				cease to exist (or revert to their previous value) once the parent
					<literal>&lt;phingcall></literal> tag completes.</para>
		</note>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;property name="strings.test" value="Harr harr, more power!" />
&lt;echo message="${strings.test}" />

&lt;property name="foo.bar" value="Yet another property..." />
&lt;echo message="${foo.bar}" />

&lt;property file="build.properties" />

&lt;property environment="env" />

&lt;property name="newproperty" value="Hello"&gt;
  &lt;filterchain&gt;
    &lt;replaceregexp&gt;
      &lt;regexp pattern="Hello" replace="World" ignoreCase="true"/&gt;
    &lt;/replaceregexp&gt;
  &lt;/filterchain&gt;
&lt;/property&gt;</programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags:</title>
			<itemizedlist>
				<listitem>
					<para><literal>filterchain</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="PropertyPromptTask">
		<title>PropertyPromptTask </title>
		<para><literal>PropertyPromptTask</literal> is a simple task to read in user input into a
			property. If you need something more advanced, see the <xref xlink:href="#InputTask"
			/>.</para>


		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>propertyName</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name of the Property to set.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>promptText</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The text to use for the prompt.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>promptCharacter</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The character to use after the prompt.</entry>
						<entry>?</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>defaultValue</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>A default value to use (if user just hits enter).</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>useExistingValue</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Whether existing property should be used if available. (This will
							result in user only being prompted if the propertyName property is not
							already set.)</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;propertyprompt propertyName="someprop" defaultValue="/var/www"
		promptText="Enter your web root" />
&lt;echo>${someprop}&lt;/echo></programlisting>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="ReflexiveTask">
		<title>ReflexiveTask </title>
		<para>The <literal>ReflexiveTask</literal> performs operations on files. It is essentially a
			convenient way to transform (using filter chains) files without copying them.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>file</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>A single file to be processed.</entry>
						<entry>n/a</entry>
						<entry>Yes (unless &lt;fileset> provided)</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;reflexive>
  &lt;fileset dir=".">
    &lt;include pattern="*.html">
  &lt;/fileset>
  &lt;filterchain>
    &lt;replaceregexp>
      &lt;regexp pattern="\r(\n)" replace="\1"/>
    &lt;/replaceregexp>
  &lt;/filterchain>
&lt;/reflexive></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags:</title>
			<itemizedlist>
				<listitem>
					<para><literal>fileset</literal></para>
				</listitem>
				<listitem>
					<para><literal>filterchain</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="ResolvePathTask">
		<title>ResolvePathTask </title>
		<para>The <literal>ResolvePathTask</literal> turns a relative path into an absolute path, with
			respect to specified directory or the project basedir (if no dir attribute
			specified).</para>
		<para>This task is useful for turning a user-defined relative path into an absolute path in
			cases where buildfiles will be called in different directories. Without this task,
			buildfiles lower in the directory tree would mis-interpret the user-defined relative
			paths.</para>


		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>file</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The file or directory path to resolve.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>dir</literal></entry>
						<entry><literal role="type">File</literal></entry>
						<entry>The base directory to use when resolving "file".</entry>
						<entry>project.basedir</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>propertyName</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name of the property to set with resolved (absolute)
							path.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>level</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Control the level at which status messages are reported. One of
								<literal>error</literal>, <literal>warning</literal>,
								<literal>info</literal>, <literal>verbose</literal>,
								<literal>debug</literal>.</entry>
						<entry><literal>verbose</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;property name="relative_path" value="./dirname"/>

&lt;resolvepath propertyName="absolute_path" file="${relative_path}"/>

&lt;echo>Resolved [absolute] path: ${absolute_path}&lt;/echo></programlisting>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="TaskdefTask">
		<title>TaskdefTask </title>
		<para>With the <literal>TaskdefTask</literal> you can import a user task into your
			buildfile.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>classname</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The path to the class that defines the TaskClass.</entry>
						<entry>n/a</entry>
						<entry>Yes, unless the <literal>file</literal> attribute has been
							specified.</entry>
					</row>
					<row>
						<entry><literal>name</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name the task is available as after importing. If you specify
							"validate", for example, you can access the task imported here with
								<literal>&lt;validate></literal>.</entry>
						<entry>n/a</entry>
						<entry>Yes, unless the <literal>file</literal> attribute has been
							specified.</entry>
					</row>
					<row>
						<entry><literal>file</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Name of the file to load definitions from.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>classpath</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The classpath to use when including classes. This is added to PHP's
							include_path.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>classpathref</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Reference to classpath to use when including classes. This is added
							to PHP's include_path.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;!-- Includes the Task named "ValidateHTMLTask" and makes it available by
     &lt;validatehtml> -->
&lt;taskdef classname="user.tasks.ValidateHTMLTask" name="validatehtml" />

&lt;!-- Includes the Task "RebootTask" from "user/sometasks" somewhere inside
     the $PHP_CLASSPATH -->
&lt;taskdef classname="user.sometasks.RebootTask" name="reboot" />

&lt;!-- Includes all tasks from the property file. Each line in the property 
file defines a task in the format: name=path.to.Task -->
&lt;taskdef file="/path/to/mytasks.properties" /></programlisting>
			<para>
				<emphasis role="bold">NB:</emphasis> Taskdef now supports the PEAR-style naming
				convention to define and load tasks:</para>
			<programlisting language="xml">&lt;taskdef name="sampletask" classname="Dir_Subdir_SampleTask"/></programlisting>
			<para>will load class <literal>Dir_Subdir_SampleTask</literal> from file
					<filename>Dir/Subdir/SampleTask.php</filename>.</para>
		</sect2>

		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>classpath</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="TouchTask">
		<title>TouchTask </title>
		<para>The <literal>TouchTask</literal> works like the Unix <literal>touch</literal> command: It
			sets the <literal>modtime</literal> of a file to a specific time. Default is the current
			time.</para>


		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>file</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The file which time is to be changed.</entry>
						<entry>n/a</entry>
						<entry>Yes, or nested <literal>&lt;fileset></literal> tag</entry>
					</row>
					<row>
						<entry><literal>datetime</literal></entry>
						<entry><literal role="type">DateTime</literal></entry>
						<entry>The date and time the mtime of the file is to be set to. The format
							is "MM/DD/YYYY HH:MM AM or PM"</entry>
						<entry><literal>now</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>millis</literal></entry>
						<entry><literal role="type">Integer</literal></entry>
						<entry>The number of milliseconds since Midnight Jan 1 1970 (Unix
							epoche).</entry>
						<entry><literal>now</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;touch file="README.txt" millis="102134111" />

&lt;touch file="COPYING.lib" datetime="10/10/1999 09:31 AM" /></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>fileset</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="trycatch" xml:id="TryCatchTask">
		<title>TryCatchTask</title>
		<para>This task is a wrapper task that lets you run tasks(s) when another set of tasks fails, 
			mirroring PHP's <literal>try/catch</literal> functionality (with the addition of 
			<literal>finally</literal> block)</para>
		<para>The tasks inside of the <literal>try</literal> block will always be run. If one of 
			them throws a BuildException, the following things can happen:</para>
		<itemizedlist>
			<listitem>
				<para>If there is no <literal>catch</literal> block, the
					exception will be passed to Phing.</para>
			</listitem>
			<listitem>
				<para>If the <literal>property</literal> attribute has been set a property of that
					name will contain the message of the exception.</para>
			</listitem>
			<listitem>
				<para>If there is a <literal>catch</literal> block, the nested tasks will be
					run.</para>
			</listitem>
		</itemizedlist>
		<para>If a <literal>finally</literal> block is present, the nested tasks will be run
			regardless of whether the tasks in the <literal>try</literal> block have thrown an
			exception or not.</para>
		<para>This task was inspired by <link xlink:href="http://ant-contrib.sourceforge.net/tasks/tasks/trycatch.html">http://ant-contrib.sourceforge.net/tasks/tasks/trycatch.html</link>.</para>
		<table>
			<title>Attributes</title>
		<tgroup cols="5">
			<colspec colname="name" colnum="1" colwidth="1.5*"/>
			<colspec colname="type" colnum="2" colwidth="0.8*"/>
			<colspec colname="description" colnum="3" colwidth="3.5*"/>
			<colspec colname="default" colnum="4" colwidth="0.8*"/>
			<colspec colname="required" colnum="5" colwidth="1.2*"/>
			<thead>
				<row>
					<entry>Name</entry>
					<entry>Type</entry>
					<entry>Description</entry>
					<entry>Default</entry>
					<entry>Required</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry><literal>property</literal></entry>
					<entry><literal role="type">String</literal></entry>
					<entry>Name of a property that will receive the message of the exception that has been caught
							(if any)</entry>
					<entry>n/a</entry>
					<entry>No</entry>
				</row>
			</tbody>
		</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting>&lt;trycatch property="foo">
    &lt;try>
        &lt;fail>Tada!&lt;/fail>
    &lt;/try>

    &lt;catch>
        &lt;echo>In catch.&lt;/echo>
    &lt;/catch>
		                
    &lt;finally>
        &lt;echo>In finally.&lt;/echo>
    &lt;/finally>
&lt;/trycatch>

&lt;echo>As property: ${foo}&lt;/echo></programlisting>
		</sect2>
		
	</sect1>
	<sect1 role="taskdef" xml:id="TstampTask">
		<title>TstampTask </title>
		<para>Sets the <literal>DSTAMP</literal>, <literal>TSTAMP</literal>, and <literal>TODAY</literal>
			properties in the current project. By default, the <literal>DSTAMP</literal> property is
			in the format <literal>"%Y%m%d"</literal>, <literal>TSTAMP</literal> is in the format
				<literal>"%H%M"</literal>, and <literal>TODAY</literal> is in the format
				<literal>"%B %d %Y"</literal>. Use the nested <literal>&lt;format></literal> element
			to specify a different format.</para>
		<para>These properties can be used in the build-file, for instance, to create time-stamped
			filenames, or used to replace placeholder tags inside documents to indicate, for
			example, the release date. The best place for this task is probably in an initialization
			target.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>prefix</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Prefix used for all properties set.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;tstamp/></programlisting>
			<para>sets the standard DSTAMP, TSTAMP, and TODAY properties according to the default
				formats.</para>
			<programlisting language="xml">&lt;tstamp>
  &lt;format property="DATE" pattern="%c" locale="nl_NL"/>
&lt;/tstamp></programlisting>
			<para>sets the standard properties as well as the property DATE with the date/time
				pattern "%c" using the Dutch locale.</para>
			<programlisting language="xml">&lt;tstamp prefix="start"/></programlisting>
			<para>sets three properties with the standard formats, prefixed with "start.":
				start.DSTAMP, start.TSTAMP, and start.TODAY.</para>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>format</literal></para>
					<para>The <literal>Tstamp</literal> task supports a <literal>&lt;format></literal> nested
						element that allows a property to be set to the current date and time in a
						given format. The date/time patterns are as defined in the PHP
							<literal>strftime()</literal> function.</para>
				</listitem>
			</itemizedlist>

			<table>
				<title>Attributes</title>
				<tgroup cols="5">
					<colspec colname="name" colnum="1" colwidth="1.5*"/>
					<colspec colname="type" colnum="2" colwidth="0.8*"/>
					<colspec colname="description" colnum="3" colwidth="3.5*"/>
					<colspec colname="default" colnum="4" colwidth="0.8*"/>
					<colspec colname="required" colnum="5" colwidth="1.2*"/>
					<thead>
						<row>
							<entry>Name</entry>
							<entry>Type</entry>
							<entry>Description</entry>
							<entry>Default</entry>
							<entry>Required</entry>
						</row>
					</thead>
					<tbody>
						<row>
							<entry><literal>property</literal></entry>
							<entry><literal role="type">String</literal></entry>
							<entry>The property to receive the date/time string in the given
								pattern.</entry>
							<entry>n/a</entry>
							<entry>Yes</entry>
						</row>
						<row>
							<entry><literal>classname</literal></entry>
							<entry><literal role="type">String</literal></entry>
							<entry>The date/time pattern to be used. The values are as defined by
								the PHP strftime() function.</entry>
							<entry>n/a</entry>
							<entry>Yes</entry>
						</row>
						<row>
							<entry><literal>locale</literal></entry>
							<entry><literal role="type">String</literal></entry>
							<entry>The locale used to create date/time string. For more information
								see the PHP setlocale() function.</entry>
							<entry>n/a</entry>
							<entry>No</entry>
						</row>
					</tbody>
				</tgroup>
			</table>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="TypedefTask">
		<title>TypedefTask </title>
		<para>With the <literal>TypedefTask</literal> you can import a user type into your
			buildfile.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>classname</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The path to the class that defines the type class.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>name</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The name the type is available as after importing. If you specify
							"cproject", for example, you can access the type imported here with
								<literal>&lt;cproject></literal>.</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>classpath</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The classpath to use when including classes. This is added to PHP's
							include_path.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>classpathref</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Reference to classpath to use when including classes. This is added
							to PHP's include_path.</entry>
						<entry>n/a</entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;!-- 
Includes the Type named "CustomProject" and makes it available by
&lt;cproject> 
-->
&lt;typedef classname="user.types.CustomProject" name="cproject" /></programlisting>
		</sect2>

		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>classpath</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="UpToDateTask">
		<title>UpToDateTask </title>
		<para><literal>UpToDateTask</literal> tests if a file is newer than another file or files and sets
			a property if it is. This is a common way to avoid, possibly time consuming, creation of
			a target if none of the files/resources it depends on have changed.</para>
		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>property</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>Name of the property that is to be set</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>value</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The value the property is to be set to</entry>
						<entry><literal>true</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>srcfile</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The file to check against target file(s)</entry>
						<entry>n/a</entry>
						<entry>Yes (or nested <literal>fileset</literal>)</entry>
					</row>
					<row>
						<entry><literal>targetfile</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The file for which we want to determine the status</entry>
						<entry>n/a</entry>
						<entry>Yes (or nested<literal> mapper</literal>)</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;uptodate property="propelBuild.notRequired" targetfile="${deploy}/propelClasses.tgz" >
  &lt;fileset dir="${src}/propel">
    &lt;include="**/*.php"/>
  &lt;/fileset>
&lt;/uptodate></programlisting>
			<para>The above example sets the property <literal>propelBuild.notRequired</literal> to
				true if the <literal>${deploy}/propelClasses.tgz</literal> file is more up-to-date
				than any of the PHP class files in the <literal>${src}/propel</literal>
				directory.</para>
			<programlisting language="xml">&lt;target name="CompileTarget">
  &lt;uptodate property="target.uptodate" targetfile="main">
    &lt;fileset refid="sources"/>
  &lt;/uptodate>
  &lt;if>
    &lt;not>&lt;isset property="target.uptodate"/>&lt;/not>
   &lt;then>
      &lt;!-- Some commands to update the target ... -->
   &lt;/then>
  &lt;/if>
&lt;/target></programlisting>
			<para>The above example shows a common use when doing a "compile" type target where a
				single target depends on other source files. In this case the commands to update the
				target (whatever they are) are only run if any of the source files are more up to
				date than the target.</para>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<itemizedlist>
				<listitem>
					<para><literal>filelist</literal></para>
				</listitem>
				<listitem>
					<para><literal>fileset</literal></para>
				</listitem>
				<listitem>
					<para><literal>mapper</literal></para>
				</listitem>
			</itemizedlist>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="WaitForTask">
		<title>WaitForTask</title>
		<para>Wait for a condition to become true or a timeout, whichever comes first.</para>
		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>MaxWait</literal></entry>
						<entry><literal>Integer</literal></entry>
						<entry>Set the maximum length of time to wait in units</entry>
						<entry>3min</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>WaitUnit</literal></entry>
						<entry><literal>String</literal></entry>
						<entry>Set the max wait time unit. Must be one of
								"<literal>week</literal>","<literal>day</literal>", "<literal>hour</literal>",
							"<literal>minute</literal>", "<literal>second</literal>", "<literal>millisecond</literal>"</entry>
						<entry>millisecond</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>CheckEvery</literal></entry>
						<entry><literal>Integer</literal></entry>
						<entry>Set the time between each check</entry>
						<entry>500ms</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>CheckEveryUnit</literal></entry>
						<entry><literal>String</literal></entry>
						<entry>Set the check every time unit. Must be one of
							"<literal>week</literal>","<literal>day</literal>", "<literal>hour</literal>",
							"<literal>minute</literal>", "<literal>second</literal>", "<literal>millisecond</literal>"</entry>
						<entry>milliseconds</entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>TimeoutProperty</literal></entry>
						<entry><literal>String</literal></entry>
						<entry>Name of the property to set after a timeout. </entry>
						<entry>null</entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<sect2>
			<title>Examples</title>
			<para>Wait for a maximum of ten seconds for the file "<filename>ready</filename>" to
				appear.</para>
			<programlisting language="xml">&lt;waitfor maxwaitunit="second" maxwait="10"> 
  &lt;available file="ready"/>
&lt;/waitfor>       </programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Tags</title>
			<para>All conditionals including <literal>and</literal>, <literal>or</literal>,
					<literal>not</literal> etc. </para>
		</sect2>
	</sect1>
	<sect1 role="taskdef" xml:id="XsltTask">
		<title>XsltTask </title>
		<para>With <literal>XsltTask</literal>, you can run a XSLT transformation on an XML file.
			Actually, <literal>XsltTask</literal> extends <literal>CopyTask</literal>, so you can
			use all the elements allowed there.</para>
		<para><literal>XsltTask</literal> is implemented by means of the
				<literal>XsltFlter</literal> and hence relies on PHP5 XSLT support via
				(<literal>libxslt</literal>) which must be available in php5. The
				<literal>XsltTask</literal> is equivalent to running command line
				<literal>xsltproc</literal> since that is a frontend for libxslt.</para>

		<table>
			<title>Attributes</title>
			<tgroup cols="5">
				<colspec colname="name" colnum="1" colwidth="1.5*"/>
				<colspec colname="type" colnum="2" colwidth="0.8*"/>
				<colspec colname="description" colnum="3" colwidth="3.5*"/>
				<colspec colname="default" colnum="4" colwidth="0.8*"/>
				<colspec colname="required" colnum="5" colwidth="1.2*"/>
				<thead>
					<row>
						<entry>Name</entry>
						<entry>Type</entry>
						<entry>Description</entry>
						<entry>Default</entry>
						<entry>Required</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry><literal>style</literal></entry>
						<entry><literal role="type">String</literal></entry>
						<entry>The path where the Xslt file is located</entry>
						<entry>n/a</entry>
						<entry>Yes</entry>
					</row>
					<row>
						<entry><literal>resolvedocumentexternals</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether to resolve entities in the XML document. (see <link
								xlink:href="http://www.php.net/manual/en/class.domdocument.php#domdocument.props.resolveexternals"
								role="extern">this link</link> for details)</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
					<row>
						<entry><literal>resolvestylesheetexternals</literal></entry>
						<entry><literal role="type">Boolean</literal></entry>
						<entry>Whether to resolve entities in the stylesheet.</entry>
						<entry><literal>false</literal></entry>
						<entry>No</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<para><literal>Note:</literal> You can also use all the attributes available for <xref
				xlink:href="#CopyTask"/>.</para>
		<sect2>
			<title>Examples</title>
			<programlisting language="xml">&lt;!-- Transform docbook with an imaginary XSLT file -->
&lt;xslt todir="/srv/docs/phing" style="dbk2html.xslt" >
  &lt;fileset dir=".">
    &lt;include name="**/*.xml" />
  &lt;/fileset>
&lt;/xslt></programlisting>
		</sect2>
		<sect2 role="nestedtags">
			<title>Supported Nested Elements</title>
			<itemizedlist>
				<listitem>
					<para><literal>mapper</literal></para>
				</listitem>
				<listitem>
					<para><literal>filterchain</literal></para>
				</listitem>
				<listitem>
					<para><literal>param</literal></para>
				</listitem>
			</itemizedlist>
			<para><literal>Note:</literal> You can use all the elements also available for <xref
					xlink:href="#CopyTask"/>.</para>
			<para>Additionally, you can use <literal>&lt;param></literal> tags with a
					<literal>name</literal> and a <literal>expression</literal> (or
					<literal>value</literal> alias) attribute. These parameters are then available
				from within the xsl style sheet.</para>
		</sect2>
	</sect1>
</appendix>
