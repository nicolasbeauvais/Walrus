<?xml version="1.0" encoding="UTF-8"?>
<?xml-model xlink:href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" 
            schematypens="http://relaxng.org/ns/structure/1.0"?>
<appendix xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="app.corefilters">
    <title>Core filters</title>


    <para>Filters are a subset of Phing <literal>data types</literal> which provide for the
        transformation of file contents during the operation of another task. For example, a filter
        might replace tokens in a file as part of a copy task.</para>

    <para>Filters have to be defined within a <literal>&lt;filterchain></literal> context to work.
        Example:</para>

    <programlisting language="xml">&lt;filterchain>
  &lt;expandproperties />
&lt;/filterchain></programlisting>
    <para>There are two ways to use a filter: System filters (the ones shipped with Phing) can be
        used with their own tag name, such as <literal>&lt;xsltfilter</literal>>,
            &lt;<literal>expandpropertyfilter</literal>> or <literal>&lt;tabtospaces</literal>>.
        User-defined filters can use the way is to use the <literal>&lt;filterreader></literal>
        tag.</para>

    <sect1 role="filterdef" xml:id="PhingFilterReader">
        <title>PhingFilterReader</title>
        <para>The PhingFilterReader is used when you want to use filters that are not directly
            available through their own tag. Example:</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;filterreader classname="phing.filter.ReplaceTokens">
    &lt;!-- other way to set attributes -->
    &lt;param name="begintoken" value="@@" />
    &lt;param name="endtoken" value="@@" />

    &lt;!-- other way to set nested tags -->
    &lt;param type="token" key="bar" value="foo" />
  &lt;/filterreader>
&lt;/filterchain></programlisting>
        <para>In the <literal>filterreader</literal> tag you have to specify the path the class is
            in. The <literal>FilterReader</literal> will then load this class and pass the
            parameters to the loaded filter. There are two types of parameters: First, you can pass
            "normal" parameters to the loaded filter. That means, you can pass parameters as if they
            were attributes. If you want to do this, you only specify the <literal>name</literal>
            and <literal>value</literal> attributes in the <literal>param</literal> tag. You can
            also pass nested elements to the filter. Then, you have to specify the
                <literal>type</literal> attribute. This attribute specifies the name of the nested
            tag.</para>
        <para>The result of the example above is identical with the following code:</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;replacetokens begintoken="@@" endtoken="@@">
    &lt;token key="bar" value="foo" />
  &lt;/replacetokens>
&lt;/filterchain></programlisting>

        <table>
            <title>Attributes for <literal>&lt;filterreader></literal>
            </title>
            <tgroup cols="5">
                <colspec colname="name" colnum="1" colwidth="1.5*"/>
                <colspec colname="type" colnum="2" colwidth="0.8*"/>
                <colspec colname="description" colnum="3" colwidth="3.5*"/>
                <colspec colname="default" colnum="4" colwidth="0.8*"/>
                <colspec colname="required" colnum="5" colwidth="1.2*"/>                
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Type</entry>
                        <entry>Description</entry>
                        <entry>Default</entry>
                        <entry>Required</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>classname</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>Name of class to use (in dot-path notation).</entry>
                        <entry>n/a</entry>
                        <entry>Yes</entry>
                    </row>
                    <row>
                        <entry><literal>classpath</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>The classpath to use when including classes. This is added to PHP's
                            include_path.</entry>
                        <entry>n/a</entry>
                        <entry>No</entry>
                    </row>
                    <row>
                        <entry>classpatxlink:href</entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>Reference to classpath to use when including classes. This is added
                            to PHP's include_path.</entry>
                        <entry>n/a</entry>
                        <entry>No</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <sect2>
            <title>Nested tags</title>
            <para>The <literal>PhingFilterReader</literal> supports nested &lt;classpaentry>.</para>
        </sect2>
        <sect2>
            <title>Advanced</title>
            <para>In order to support the <literal>&lt;filterreader ... /></literal> sytax, your
                class must extend the BaseParamFilterReader class. Most of the filters that are
                bundled with Phing can be invoked using this syntax. The noteable exception (at time
                of writing) is the ReplaceRegexp filter, which expects find/replace parameters that
                do not fit the name/value mold. For this reason, you must always use the shorthand
                    <literal>&lt;replaceregexp .../></literal> to invoke this filter.</para>
        </sect2>
    </sect1>
    <sect1 role="filterdef" xml:id="ExpandProperties">
        <title>ExpandProperties</title>
        <para>The ExpandProperties simply replaces property names with their property values. For
            example, if you have the following in your build file:</para>
        <programlisting language="xml">&lt;property name="description.txt" value="This is a text file" />

&lt;copy todir="/tmp">
  &lt;filterchain>
    &lt;expandproperties />
  &lt;/filterchain>

  &lt;fileset dir=".">
    &lt;include name="**" />
  &lt;/fileset>
&lt;/copy></programlisting>
        <para>And the string <literal>${description.txt}</literal> it will be replaced by
                <literal>This is a text file</literal>.</para>

        <table>
            <title> Attributes for <literal>&lt;expandproperties></literal>
            </title>
            <tgroup cols="5">
                <colspec colname="name" colnum="1" colwidth="1.5*"/>
                <colspec colname="type" colnum="2" colwidth="0.8*"/>
                <colspec colname="description" colnum="3" colwidth="3.5*"/>
                <colspec colname="default" colnum="4" colwidth="0.8*"/>
                <colspec colname="required" colnum="5" colwidth="1.2*"/>                
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Type</entry>
                        <entry>Description</entry>
                        <entry>Default</entry>
                        <entry>Required</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>level</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>Control the level at which this message is reported. One of
                                <literal>error</literal>, <literal>warning</literal>,
                                <literal>info</literal>, <literal>verbose</literal>,
                                <literal>debug</literal>.</entry>
                        <entry><literal>info</literal></entry>
                        <entry>No</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </sect1>
    <sect1 role="filterdef" xml:id="HeadFilter">
        <title>HeadFilter</title>
        <para>This filter reads the first <literal>n</literal> lines of a file; the others are not
            further passed through the filter chain. Usage example:</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;headfilter lines="20" />
&lt;/filterchain></programlisting>

        <table>
            <title> Attributes for the <literal>&lt;headfilter> </literal>tag </title>
            <tgroup cols="5">
                <colspec colname="name" colnum="1" colwidth="1.5*"/>
                <colspec colname="type" colnum="2" colwidth="0.8*"/>
                <colspec colname="description" colnum="3" colwidth="3.5*"/>
                <colspec colname="default" colnum="4" colwidth="0.8*"/>
                <colspec colname="required" colnum="5" colwidth="1.2*"/>                
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Type</entry>
                        <entry>Description</entry>
                        <entry>Default</entry>
                        <entry>Required</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>lines</literal></entry>
                        <entry><literal role="type">Integer</literal></entry>
                        <entry>Number of lines to read.</entry>
                        <entry>10</entry>
                        <entry>No</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </sect1>
    <sect1 role="filterdef" xml:id="IconvFilter">
        <title>IconvFilter</title>

        <para>The IconvFilter encodes file from <code>in</code> encoding to <code>out</code>
            encoding. Usage example:</para>

        <programlisting language="xml">&lt;filterchain>
    &lt;iconvfilter inputencoding="UTF-8" outputencoding="CP1251" />
&lt;/filterchain></programlisting>


        <table>
            <title> Attributes for the <literal>&lt;iconvfilter> </literal>tag </title>
            <tgroup cols="5">
                <colspec colname="name" colnum="1" colwidth="1.5*"/>
                <colspec colname="type" colnum="2" colwidth="0.8*"/>
                <colspec colname="description" colnum="3" colwidth="3.5*"/>
                <colspec colname="default" colnum="4" colwidth="0.8*"/>
                <colspec colname="required" colnum="5" colwidth="1.2*"/>                
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Type</entry>
                        <entry>Description</entry>
                        <entry>Default</entry>
                        <entry>Required</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>inputencoding</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>Input encoding.</entry>
                        <entry>n/a</entry>
                        <entry>Yes</entry>
                    </row>
                    <row>
                        <entry><literal>outputencoding</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>Output encoding.</entry>
                        <entry>n/a</entry>
                        <entry>Yes</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </sect1>
    <sect1 role="filterdef" xml:id="LineContains">
        <title>Line Contains </title>
        <para>This filter is only "permeable" for lines that contain the expression given as
            parameter. For example, the following filterchain would only let all the lines pass that
            contain <literal>class</literal>:</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;linecontains>
    &lt;contains value="class" />
  &lt;/linecontains>
&lt;/filterchain></programlisting>

        <sect2>
            <title>Nested tags</title>

            <para>The <literal>linecontains</literal> tag must contain one or more
                    <literal>contains</literal> tags. Latter must have a <literal>value</literal>
                attribute that has to be set to the string the line has to contain to be let
                through.</para>
        </sect2>
    </sect1>
    <sect1 role="filterdef" xml:id="LineContainsRegexp">
        <title>LineContainsRegexp</title>
        <para>This filter is similar to <xref xlink:href="#LineContains"/> but you can specify
            regular expressions instead of simple strings.</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;linecontainsregexp>
    &lt;regexp pattern="foo(.*)bar" />
  &lt;/linecontainsregexp>
&lt;/filterchain></programlisting>

        <sect2>
            <title>Nested tags</title>

            <para>The <literal>LineContains</literal> filter has to contain at least one
                    <literal>regexp</literal> tag. This must have a <literal>pattern</literal>
                attribute that is set to a regular expression.</para>
        </sect2>
    </sect1>
    <sect1 role="filterdef" xml:id="PrefixLines">
        <title>PrefixLines</title>
        <para>This filter adds a prefix to every line. The following example will add the string
                <literal>foo: </literal> in front of every line.</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;prefixlines prefix="foo: " />
&lt;/filterchain></programlisting>

        <table>
            <title> Attributes for the <literal>&lt;prefixlines></literal> tag </title>
            <tgroup cols="5">
                <colspec colname="name" colnum="1" colwidth="1.5*"/>
                <colspec colname="type" colnum="2" colwidth="0.8*"/>
                <colspec colname="description" colnum="3" colwidth="3.5*"/>
                <colspec colname="default" colnum="4" colwidth="0.8*"/>
                <colspec colname="required" colnum="5" colwidth="1.2*"/>                
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Type</entry>
                        <entry>Description</entry>
                        <entry>Default</entry>
                        <entry>Required</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>prefix</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>String to prepend to every line.</entry>
                        <entry>n/a</entry>
                        <entry>Yes</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </sect1>
    <sect1 role="filterdef" xml:id="ReplaceTokens">
        <title>ReplaceTokens</title>
        <para>The <literal>ReplaceTokens</literal> filter will replace certain tokens. Tokens are
            strings enclosed in special characters. If you want to replace
                <literal>##BCHOME##</literal> by the path to the directory set in the environment
            variable <literal>BCHOME</literal>, you could do the following:</para>
        <programlisting language="xml">&lt;property environment="env" />

&lt;filterchain>
  &lt;replacetokens begintoken="##" endtoken="##">
    &lt;token key="BCHOME" value="${env.BCHOME}" />
  &lt;/replacetokens>
&lt;/filterchain></programlisting>

        <table>
            <title> Attributes for the <literal>&lt;replacetokens></literal> tag </title>
            <tgroup cols="5">
                <colspec colname="name" colnum="1" colwidth="1.5*"/>
                <colspec colname="type" colnum="2" colwidth="0.8*"/>
                <colspec colname="description" colnum="3" colwidth="3.5*"/>
                <colspec colname="default" colnum="4" colwidth="0.8*"/>
                <colspec colname="required" colnum="5" colwidth="1.2*"/>                
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Type</entry>
                        <entry>Description</entry>
                        <entry>Default</entry>
                        <entry>Required</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>begintoken</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>The string that marks the beginning of a token.</entry>
                        <entry>@</entry>
                        <entry>No</entry>
                    </row>
                    <row>
                        <entry><literal>endtoken</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>The string that marks the end of a token.</entry>
                        <entry>@</entry>
                        <entry>No</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <sect2>
            <title>Nested tags</title>
            <para>The <literal>ReplaceTokens</literal> filter must contain one or more
                    <literal>token</literal> tags. These must have a <literal>key</literal> and a
                    <literal>value</literal> attribute.</para>
        </sect2>
    </sect1>
    <sect1 role="filterdef" xml:id="ReplaceTokensWithFile">
        <title>ReplaceTokensWithFile</title>
        <para>The <literal>ReplaceTokensWithFile</literal> filter will replace certain tokens with
            the contents of a file. The name of the file to use as replacement is derived from the
            token name itself. Tokens are strings enclosed in special characters which are user
            selectable.</para>
        <para>This filter could for example be used to insert code examples in documentation where
            the example code are real executable files kept outside the documentation.</para>
        <para>If you for example want to replace <literal>#!example1##</literal> with the content of
            the file " <code>example1.php</code> " you could do the following</para>
        <programlisting language="xml">&lt;filterchain>
      &lt;replacetokenswithfile begintoken="#!" endtoken="##"
          dir="exampledir/" postfix=".php" />
      &lt;/filterchain></programlisting>
        <para>The filer above will replace all tokens within the begin and end token specified with
            the contents of the file whose base name is that of the token with the added postfix
            ".php". Only the directory specified in the <literal>dir</literal> attribute is
            searched. If the file is not found the token is left untouched and an error message is
            given. It is important to note that <emphasis>all</emphasis> found tokens will be
            replaced with the corresponding file. So in the example below even
                <literal>#!example2##</literal> will be replaced with the content of the file "
                <code>example2.php</code> "</para>


        <table>
            <title> Attributes for the <literal>&lt;replacetokenswithfile></literal> tag </title>
            <tgroup cols="5">
                <colspec colname="name" colnum="1" colwidth="1.5*"/>
                <colspec colname="type" colnum="2" colwidth="0.8*"/>
                <colspec colname="description" colnum="3" colwidth="3.5*"/>
                <colspec colname="default" colnum="4" colwidth="0.8*"/>
                <colspec colname="required" colnum="5" colwidth="1.2*"/>                
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Type</entry>
                        <entry>Description</entry>
                        <entry>Default</entry>
                        <entry>Required</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>begintoken</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>The string that marks the beginning of a token.</entry>
                        <entry>#@#</entry>
                        <entry>No</entry>
                    </row>
                    <row>
                        <entry><literal>endtoken</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>The string that marks the end of a token.</entry>
                        <entry>#@#</entry>
                        <entry>No</entry>
                    </row>
                    <row>
                        <entry><literal>prefix</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>A string that will be added in front of the token to construct the
                            filename that will be used as source when replacing the token.</entry>
                        <entry>''</entry>
                        <entry>No</entry>
                    </row>
                    <row>
                        <entry><literal>postfix</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>A string that will be added to the end of the token to construct the
                            filename that will be used as source when replacing the token.</entry>
                        <entry>''</entry>
                        <entry>No</entry>
                    </row>
                    <row>
                        <entry><literal>dir</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>The directory where to look for the files to use as replacements for
                            the tokens</entry>
                        <entry>'./'</entry>
                        <entry>No</entry>
                    </row>
                    <row>
                        <entry><literal>translatehtml</literal></entry>
                        <entry><literal role="type">Boolean</literal></entry>
                        <entry>If true all html special characters (e.g. ">") in the file to there
                            corresponding html entities (e.g. "&amp;gt;") before the file is
                            inserted.</entry>
                        <entry><literal>true</literal></entry>
                        <entry>No</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <sect2>
            <title>Nested tags</title>
            <para>None.</para>
        </sect2>
    </sect1>
    <sect1 role="filterdef" xml:id="ReplaceRegexp">
        <title>ReplaceRegexp</title>
        <para>The <literal>ReplaceRegexp</literal> filter will perform a regexp find/replace on the
            input stream. For example, if you want to replace ANT with Phing (ignoring case) and you
            want to replace references to *.java with *.php:</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;replaceregexp>
	&lt;regexp pattern="ANT" replace="Phing" ignoreCase="true"/>
	&lt;regexp pattern="(\w+)\.java" replace="\1.php"/>
  &lt;/replaceregexp>
&lt;/filterchain></programlisting>
        <para>Or, replace all Windows line-endings with Unix
            line-endings:</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;replaceregexp>
	&lt;regexp pattern="\r(\n)" replace="\1"/>
  &lt;/replaceregexp>
&lt;/filterchain></programlisting>

        <sect2>
            <title>Nested tags</title>
            <para>The <literal>ReplaceRegExp</literal> filter must contain one or more
                    <literal>regexp</literal> tags. These must have <literal>pattern</literal> and
                    <literal>replace</literal> attributes. The full list of supported attributes is
                as following:</para>
            <table>
                <title> Attributes for the <literal>&lt;regexp></literal> tag </title>
                <tgroup cols="5">
                    <colspec colname="name" colnum="1" colwidth="1.5*"/>
                    <colspec colname="type" colnum="2" colwidth="0.8*"/>
                    <colspec colname="description" colnum="3" colwidth="3.5*"/>
                    <colspec colname="default" colnum="4" colwidth="0.8*"/>
                    <colspec colname="required" colnum="5" colwidth="1.2*"/>                    
                    <thead>
                        <row>
                            <entry>Name</entry>
                            <entry>Type</entry>
                            <entry>Description</entry>
                            <entry>Default</entry>
                            <entry>Required</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><literal>pattern</literal></entry>
                            <entry><literal role="type">String</literal></entry>
                            <entry>Regular expression used as needle. Phing relies on <link
                                    xlink:href="http://php.net/pcre">Perl-compatible</link> regular
                                expressions. </entry>
                            <entry>n/a</entry>
                            <entry>Yes</entry>
                        </row>
                        <row>
                            <entry><literal>replace</literal></entry>
                            <entry><literal role="type">String</literal></entry>
                            <entry>Replacement string.</entry>
                            <entry>n/a</entry>
                            <entry>Yes</entry>
                        </row>
                        <row>
                            <entry><literal>ignoreCase</literal></entry>
                            <entry><literal role="type">Boolean</literal></entry>
                            <entry>Whether search is case-insensitive.</entry>
                            <entry><literal>false</literal></entry>
                            <entry>No</entry>
                        </row>
                        <row>
                            <entry><literal>multiline</literal></entry>
                            <entry><literal role="type">Boolean</literal></entry>
                            <entry>Whether regular expression is applied in multi-line mode.</entry>
                            <entry><literal>false</literal></entry>
                            <entry>No</entry>
                        </row>
                        <row>
                            <entry><literal>modifiers</literal></entry>
                            <entry><literal role="type">String</literal></entry>
                            <entry>Raw regular expression <link
                                    xlink:href="http://php.net/manual/en/reference.pcre.pattern.modifiers.php"
                                    >modifiers</link>. You can pass several modifiers as single
                                string, and use raw modifiers with <literal>ignoreCase</literal> and
                                    <literal>multiline</literal> attributes. In case of conflict,
                                value specified by dedicated attribute takes precedence.</entry>
                            <entry>''</entry>
                            <entry>No</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>

            <para>The previous example (using <literal>modifiers</literal> attribute this
                time):</para>
            <programlisting language="xml">&lt;filterchain>
  &lt;replaceregexp>
	&lt;regexp pattern="ANT" replace="Phing" modifiers="i"/>
	&lt;regexp pattern="(\w+)\.java" replace="\1.php"/>
  &lt;/replaceregexp>
&lt;/filterchain></programlisting>
        </sect2>


    </sect1>
    <sect1 role="filterdef" xml:id="StripLineBreaks">
        <title>StripLineBreaks</title>
        <para>The <literal>StripLineBreaks</literal> filter removes all linebreaks from the stream
            passed through the filter chain.</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;striplinebreaks />
&lt;/filterchain></programlisting>

    </sect1>
    <sect1 role="filterdef" xml:id="StripLineComments">
        <title>StripLineComments</title>
        <para>The <literal>StripLineComments</literal> filter removes all line comments from the
            stream passed through the filter chain:</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;striplinecomments>
    &lt;comment value="#" />
    &lt;comment value="--" />
    &lt;comment value="//" />
  &lt;/striplinecomments>
&lt;/filterchain></programlisting>

        <sect2>
            <title>Nested tags</title>
            <para>The <literal>striplinecomments</literal> tag must contain one or more
                    <literal>comment</literal> tags. These must have a <literal>value</literal>
                attribute that specifies the character(s) that start a line comment.</para>
        </sect2>
    </sect1>
    <sect1 role="filterdef" xml:id="StripPhpComments">
        <title>StripPhpComments</title>
        <para>The <literal>StripPhpComments</literal> filter removes all PHP comments from the
            stream passed through the filter.</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;stripphpcomments />
&lt;/filterchain></programlisting>

    </sect1>
    <sect1 role="filterdef" xml:id="StripWhitespace">
        <title>StripWhitespace</title>
        <para>The <literal>StripWhitespace</literal> filter removes all PHP comments and whitespace
            from the stream passed through the filter. Internally, this filter uses the
            php_strip_whitespace() function.</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;stripwhitespace />
&lt;/filterchain></programlisting>

    </sect1>
    <sect1 role="filterdef" xml:id="TabToSpaces">
        <title>TabToSpaces</title>
        <para>The TabToSpaces filter replaces all tab characters with a given count of space
            characters.</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;tabtospaces tablength="8" />
&lt;/filterchain></programlisting>

        <table>
            <title> Attributes for the <literal>&lt;tabtospaces></literal> filter </title>
            <tgroup cols="5">
                <colspec colname="name" colnum="1" colwidth="1.5*"/>
                <colspec colname="type" colnum="2" colwidth="0.8*"/>
                <colspec colname="description" colnum="3" colwidth="3.5*"/>
                <colspec colname="default" colnum="4" colwidth="0.8*"/>
                <colspec colname="required" colnum="5" colwidth="1.2*"/>                
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Type</entry>
                        <entry>Description</entry>
                        <entry>Default</entry>
                        <entry>Required</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>tablength</literal></entry>
                        <entry><literal role="type">Integer</literal></entry>
                        <entry>The number of space characters that a tab is to represent. </entry>
                        <entry>8</entry>
                        <entry>No</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </sect1>
    <sect1 role="filterdef" xml:id="TailFilter">
        <title>TailFilter</title>
        <para>Similar to <xref xlink:href="#HeadFilter"/>, this filter reads the last
                <literal>n</literal> lines of a file; the others are not further passed through the
            filter chain. Usage example:</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;tailfilter lines="20" />
&lt;/filterchain></programlisting>

        <table>
            <title> Attributes for the <literal>&lt;tailfilter></literal> tag </title>
            <tgroup cols="5">
                <colspec colname="name" colnum="1" colwidth="1.5*"/>
                <colspec colname="type" colnum="2" colwidth="0.8*"/>
                <colspec colname="description" colnum="3" colwidth="3.5*"/>
                <colspec colname="default" colnum="4" colwidth="0.8*"/>
                <colspec colname="required" colnum="5" colwidth="1.2*"/>                
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Type</entry>
                        <entry>Description</entry>
                        <entry>Default</entry>
                        <entry>Required</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>lines</literal></entry>
                        <entry><literal role="type">Integer</literal></entry>
                        <entry>Number of lines from the back to read.</entry>
                        <entry>10</entry>
                        <entry>No</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </sect1>
    <sect1 role="filterdef" xml:id="TidyFilter">
        <title>TidyFilter</title>
        <para>The <literal>TidyFilter</literal> allows you to use the <link
                xlink:href="http://php.net/tidy">PHP tidy extension</link> to clean up and repair
            HTML documents. Usage example:</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;tidyfilter encoding="utf8">
    &lt;config name="indent" value="true" />
    &lt;config name="output-xhtml" value="true" />
  &lt;/tidyfilter>
&lt;/filterchain></programlisting>

        <table>
            <title> Attributes for the <literal>&lt;tidyfilter></literal> tag </title>
            <tgroup cols="5">
                <colspec colname="name" colnum="1" colwidth="1.5*"/>
                <colspec colname="type" colnum="2" colwidth="0.8*"/>
                <colspec colname="description" colnum="3" colwidth="3.5*"/>
                <colspec colname="default" colnum="4" colwidth="0.8*"/>
                <colspec colname="required" colnum="5" colwidth="1.2*"/>                
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Type</entry>
                        <entry>Description</entry>
                        <entry>Default</entry>
                        <entry>Required</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>encoding</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>The expected input encoding of the file.</entry>
                        <entry>utf8</entry>
                        <entry>No</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <sect2>
            <title>Nested tags</title>
            <para>The <literal>TidyFilter</literal> supports nested &lt;config> tags to configure
                how Tidy should manipulate the documents. For a complete list of configuration
                options see the offical <link
                    xlink:href="http://tidy.sourceforge.net/docs/quickref.html">Quick
                    Reference</link>.</para>
        </sect2>
    </sect1>
    <sect1 role="filterdef" xml:id="XincludeFilter">
        <title>XincludeFilter</title>
        <para>The <literal>XincludeFilter</literal> processes a stream for Xinclude tags, and
            processes the inclusions. This is useful for processing modular XML files. DocBook book
            files are one example of modular XML files. Usage example:</para>
        <programlisting language="xml">&lt;!--
  Render a DocBook book file called manual.xml, which
  contains Xinclude tags to include individual book sections.
  -->
&lt;copy todir="${manual.dest.dir}">
  &lt;filterchain>
    &lt;xincludefilter basedir="${manual.src.dir}" />
    &lt;xsltfilter style="${manual.src.dir}/html.xsl">
      &lt;param name="base.dir" expression="${manual.dest.dir}/" />
    &lt;/xsltfilter>
  &lt;/filterchain>
  &lt;fileset dir="${manual.src.dir}">
    &lt;include name="manual.xml" />
  &lt;/fileset>
&lt;/copy></programlisting>

        <table>
            <title>Attributes for the <literal>&lt;xincludefilter></literal> tag </title>
            <tgroup cols="5">
                <colspec colname="name" colnum="1" colwidth="1.5*"/>
                <colspec colname="type" colnum="2" colwidth="0.8*"/>
                <colspec colname="description" colnum="3" colwidth="3.5*"/>
                <colspec colname="default" colnum="4" colwidth="0.8*"/>
                <colspec colname="required" colnum="5" colwidth="1.2*"/>                
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Type</entry>
                        <entry>Description</entry>
                        <entry>Default</entry>
                        <entry>Required</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>basedir</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>The working directory from which to process the
                                <literal>Xincludes</literal>. Relative pathnames in the include tags
                            are based on this location. </entry>
                        <entry>Project basedir</entry>
                        <entry>No</entry>
                    </row>
                    <row>
                        <entry><literal>resolveexternals</literal></entry>
                        <entry><literal role="type">Boolean</literal></entry>
                        <entry>Whether to resolve entities. (see <link
                                xlink:href="http://www.php.net/manual/en/class.domdocument.php#domdocument.props.resolveexternals"
                                role="extern">this link</link> for details)</entry>
                        <entry><literal>false</literal></entry>
                        <entry>No</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </sect1>
    <sect1 role="filterdef" xml:id="XsltFilter">
        <title>XsltFilter</title>
        <para>The <literal>XsltFilter</literal> applies a XSL template to the stream. Though you can
            use this filter directly, you should use XslTask <xref xlink:href="#app.coretasks"/>
            which is shortcut to the following lines:</para>
        <programlisting language="xml">&lt;filterchain>
  &lt;xsltfilter style="somexslt.xsl" />
&lt;/filterchain></programlisting>
        <para>This filter relies on PHP5 XSL support via <literal>libxslt</literal> which must be
            available for php5. Usually this means including the <literal>php5_xsl</literal> module
            when configuring PHP5. In essence this uses the same core libraries as "xsltproc"
            processor.</para>

        <table>
            <title> Attributes for the <literal>&lt;xsltfilter></literal> tag </title>
            <tgroup cols="5">
                <colspec colname="name" colnum="1" colwidth="1.5*"/>
                <colspec colname="type" colnum="2" colwidth="0.8*"/>
                <colspec colname="description" colnum="3" colwidth="3.5*"/>
                <colspec colname="default" colnum="4" colwidth="0.8*"/>
                <colspec colname="required" colnum="5" colwidth="1.2*"/>                
                <thead>
                    <row>
                        <entry>Name</entry>
                        <entry>Type</entry>
                        <entry>Description</entry>
                        <entry>Default</entry>
                        <entry>Required</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><literal>style</literal></entry>
                        <entry><literal role="type">String</literal></entry>
                        <entry>The XSLT stylesheet to use for transformation.</entry>
                        <entry>n/a</entry>
                        <entry>Yes</entry>
                    </row>
                    <row>
                        <entry><literal>html</literal></entry>
                        <entry><literal role="type">Boolean</literal></entry>
                        <entry>Whether to parse the input as HTML (using libxml2
                            DOMDocument::loadHTML()).</entry>
                        <entry><literal>false</literal></entry>
                        <entry>No</entry>
                    </row>
                    <row>
                        <entry><literal>resolvedocumentexternals</literal></entry>
                        <entry><literal role="type">Boolean</literal></entry>
                        <entry>Whether to resolve entities in the XML document. (see <link
                                xlink:href="http://www.php.net/manual/en/class.domdocument.php#domdocument.props.resolveexternals"
                                role="extern">this link</link> for details)</entry>
                        <entry><literal>false</literal></entry>
                        <entry>No</entry>
                    </row>
                    <row>
                        <entry><literal>resolvestylesheetexternals</literal></entry>
                        <entry><literal role="type">Boolean</literal></entry>
                        <entry>Whether to resolve entities in the stylesheet.</entry>
                        <entry><literal>false</literal></entry>
                        <entry>No</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <sect2>
            <title>Nested tags</title>
            <para>The <literal>XsltFilter</literal> filter may contain one or more
                    <literal>param</literal> tags to pass any XSLT parameters to the stylesheet.
                These <literal>param</literal> tags must have <literal>name</literal> and
                    <literal>expression</literal> attributes.</para>

        </sect2>
    </sect1>

</appendix>
